{"version":3,"sources":["components/Images/bottle1a.png","components/Phials/index.jsx","components/Perfume/index.jsx","components/Cart/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Phials","props","useState","quantity","setQuantity","subTotal","setSubTotal","className","title","name","class","src","bottle1a","alt","onClick","price","toFixed","Perfume","prefix","id","map","item","key","Cart","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,sC,0NCyC5BC,G,MArCA,SAACC,GAAW,IAAD,EACQC,mBAAS,GADjB,mBACjBC,EADiB,KACPC,EADO,OAEQF,mBAAS,GAFjB,mBAEjBG,EAFiB,KAEPC,EAFO,KAUxB,OACE,yBAAKC,UAAU,SACb,wBAAIA,UAAU,SAASN,EAAMO,OAC7B,wBAAID,UAAU,QAAQN,EAAMQ,MAE5B,yBAAKC,MAAM,SAASC,IAAKC,IAAUC,IAAI,mBAEvC,yBAAKN,UAAU,OACb,4BAAQA,UAAU,MAAMO,QAZJ,kBACxBV,EAAYD,EAAW,GAAKG,GAAaH,EAAW,GAAKF,EAAMc,SAW3D,KAGA,oCACE,wBAAIR,UAAU,UAAUJ,GACxB,4BAAQI,UAAU,MAAMO,QApBN,kBACxBV,EAAYD,EAAW,GAAKG,GAAaH,EAAW,GAAKF,EAAMc,SAmBzD,OAKJ,wBAAIR,UAAU,SAAd,aAA8BN,EAAMc,OAEpC,yBAAKR,UAAU,YAAf,YAEE,uBAAGA,UAAU,cAAb,OAA4BF,EAASW,QAAQ,QCsBtCC,G,MAvDC,WAuCd,OACE,yBAAKV,UAAU,QAvCA,CACf,CACEC,MAAO,aACPC,KAAK,gFACLS,OAAO,OACPH,MAAO,IACPZ,SAAU,EACVE,SAAS,EACTc,GAAI,GAEN,CACEX,MAAO,aACPC,KAAM,qFACNS,OAAO,OACPH,MAAO,IACPZ,SAAU,EACVE,SAAS,EACTc,GAAI,GAEN,CACEX,MAAO,aACPC,KAAM,0EACNS,OAAO,OACPH,MAAO,IACPZ,SAAU,EACVE,SAAS,EACTc,GAAI,GAEN,CACEX,MAAO,aACPC,KAAM,yDACNS,OAAO,OACPH,MAAO,IACPZ,SAAU,EACVE,SAAS,EACTc,GAAI,IAKMC,KAAI,SAACC,GAAD,OACZ,kBAAC,EAAD,CACEb,MAAOa,EAAKb,MACZC,KAAMY,EAAKZ,KACXS,OAAQG,EAAKH,OACbH,MAAOM,EAAKN,MACZZ,SAAUkB,EAAKlB,SACfE,SAAUgB,EAAKN,MAAQM,EAAKlB,SAC5BmB,IAAKD,EAAKF,WCrCLI,EAbD,WACZ,OACE,6BACE,+CAEA,mDACA,6BACA,uDCKSC,EATH,WACV,OACI,yBAAKjB,UAAU,OACd,kBAAC,EAAD,MACC,kBAAC,EAAD,QCGYkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3d45f16f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bottle1a.372e4c21.png\";","import React, { useState } from \"react\";\nimport bottle1a from \"../Images/bottle1a.png\";\nimport \"./Phials.css\";\n\nconst Phials = (props) => {\n  const [quantity, setQuantity] = useState(0);\n  const [subTotal, setSubTotal] = useState(0);\n  const onIncreaseCounter = () =>\n    setQuantity(quantity + 1) & setSubTotal((quantity + 1) * props.price);\n\n  const onDecreaseCounter = () =>\n    setQuantity(quantity - 1) & setSubTotal((quantity - 1) * props.price);\n  \n\n  return (\n    <div className=\"scent\">\n      <h3 className=\"title\">{props.title}</h3>\n      <h3 className=\"name\">{props.name}</h3>\n\n      <img class=\"image1\" src={bottle1a} alt=\"Perfume Bottle\" />\n\n      <div className=\"qty\">\n        <button className=\"off\" onClick={onDecreaseCounter}>\n          -\n        </button>\n        <>\n          <h3 className=\"amount\">{quantity}</h3>\n          <button className=\"add\" onClick={onIncreaseCounter}>\n            +\n          </button>\n        </>\n      </div>\n      <h3 className=\"price\">Price £{props.price}</h3>\n\n      <div className=\"subtotal\">\n        Subtotal:\n        <p className=\"line-total\">£{subTotal.toFixed(2)}</p>\n      </div>\n    </div>\n  );\n};\nexport default Phials;\n","import React from \"react\";\nimport Phials from \"../Phials/index.jsx\";\nimport \"./Perfume.css\";\nconst Perfume = () => {\n  const database = [\n    {\n      title: \"Scent No.1\",\n      name:\"Poets of Berlin: A blend of Wild green orris,vanilla,blueberry,lemon,vetiver.\",\n      prefix:\"£\",\n      price: 185.0,\n      quantity: 0,\n      subTotal:0,\n      id: 1,\n    },\n    {\n      title: \"Scent No.2\",\n      name: \"Basso Continuo in Noto :A blend of:Marsala Cask Whisky/Sandalwood/Vetiver/Leather.\",\n      prefix:\"£\",\n      price: 145.0,\n      quantity: 0,\n      subTotal:0,\n      id: 2,\n    },\n    {\n      title: \"Scent No.3\",\n      name: \"Toamasina Ensemble:An Island Blend:Grapefruit/Cardomom/Vetiver/Vanilla.\",\n      prefix:\"£\",\n      price: 160.0,\n      quantity: 0,\n      subTotal:0,\n      id: 3,\n    },\n    {\n      title: \"Scent No.4\",\n      name: \"Jazz New York:A classic blend of:Patchouli/Cedar/Lime.\",\n      prefix:\"£\",\n      price: 150.0,\n      quantity: 0,\n      subTotal:0,\n      id: 4,\n    },\n  ];\n  return (\n    <div className=\"card\">\n      {database.map((item) => (\n        <Phials\n          title={item.title}\n          name={item.name}\n          prefix={item.prefix}\n          price={item.price}\n          quantity={item.quantity}\n          subTotal={item.price * item.quantity}\n          key={item.id}\n        />\n      ))}\n    </div>\n  );\n};\nexport default Perfume;\n","import React  from 'react';\n\n const Cart = () => {\n  return (\n    <div>\n      <h1>Scent Explorers\n      </h1>\n      <span>items in cart : 0</span>\n      <br />\n      <span>total price : £ </span>\n    </div>\n\n  )\n  }\n\nexport default Cart;","import React from \"react\";\nimport \"./App.css\";\nimport Perfume from \"./components/Perfume\";\nimport Cart from \"./components/Cart\";\n\nconst App = () => {\n  return (\n      <div className=\"app\">\n       <Cart />\n        <Perfume />\n      </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}